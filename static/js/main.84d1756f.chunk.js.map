{"version":3,"sources":["components/Header.js","components/NewTicketForm.js","components/Ticket.js","components/TicketList.js","components/TicketDetail.js","components/ReusableForm.js","components/EditTicketForm.js","components/TicketControl.js","components/App.js","reportWebVitals.js","index.js","reducers/ticket-list-reducer.js"],"names":["Header","NewTicketForm","props","Fragment","onSubmit","event","preventDefault","onNewTicketCreation","names","target","value","location","issue","id","v4","type","name","placeholder","Ticket","onClick","whenTicketClicked","TicketList","Object","values","ticketList","map","ticket","onTicketSelection","key","TicketDetail","onClickingDelete","onClickingEdit","ReusableForm","formSubmissionHandler","buttonText","EditTicketForm","onEditTicket","TicketControl","handleClick","state","selectedTicket","setState","formVisibleOnPage","editing","prevState","handleAddingNewTicketToList","newTicket","dispatch","handleChangingSelectedTicket","masterTicketList","handleDeletingTicket","handleEditClick","handleEditingTicketInList","ticketToEdit","currentlyVisibleState","this","React","Component","connect","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","action","assign","newState","subscribe","console","log","getState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.84d1756f.chunk.js","sourcesContent":["import React from \"react\";\n// For this component we don't need to wrap our code in <React.Fragment> because we are only returning one element!\nfunction Header(){\n  return (\n    <h1>Help Queue</h1>\n  );\n}\n\nexport default Header;","import React from \"react\";\nimport { v4 } from 'uuid';\nimport PropTypes from \"prop-types\";\n\nfunction NewTicketForm(props){\n\n  function handleNewTicketFormSubmission(event) {\n    event.preventDefault();\n    props.onNewTicketCreation({names: event.target.names.value, location: event.target.location.value, issue: event.target.issue.value, id: v4()});\n  }\n\n  return (\n    <React.Fragment>\n      <form onSubmit={handleNewTicketFormSubmission}>\n        <input\n          type='text'\n          name='names'\n          placeholder='Pair Names' />\n        <input\n          type='text'\n          name='location'\n          placeholder='Location' />\n        <textarea\n          name='issue'\n          placeholder='Describe your issue.' />\n        <button type='submit'>Help!</button>\n      </form>\n    </React.Fragment>\n  );\n}\n\nNewTicketForm.propTypes = {\n  onNewTicketCreation: PropTypes.func\n};\n\nexport default NewTicketForm;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction Ticket(props){\n  return (\n    <React.Fragment>\n      <div onClick = {() => props.whenTicketClicked(props.id)}>\n        <h3>{props.location} - {props.names}</h3>\n        <p><em>{props.issue}</em></p>\n        <hr/>\n      </div>\n    </React.Fragment>\n  );\n}\n\nTicket.propTypes = {\n  names: PropTypes.string,\n  location: PropTypes.string,\n  issue: PropTypes.string,\n  id: PropTypes.string, \n  whenTicketClicked: PropTypes.func \n};\nexport default Ticket;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Ticket from \"./Ticket\";\n\nfunction TicketList(props){\n  return (\n    <React.Fragment>\n      <hr/>\n      {Object.values(props.ticketList).map((ticket) =>\n        <Ticket\n          whenTicketClicked = { props.onTicketSelection }\n          names={ticket.names}\n          location={ticket.location}\n          issue={ticket.issue}\n          id={ticket.id}\n          key={ticket.id}/>\n      )}\n    </React.Fragment>\n  );\n}\n\nTicketList.propTypes = {\n  ticketList: PropTypes.object,\n  onTicketSelection: PropTypes.func\n};\n\nexport default TicketList;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction TicketDetail(props){\n  const { ticket, onClickingDelete } = props;\n  \n  return (\n    <React.Fragment>\n      <h1>Ticket Detail</h1>\n      <h3>{ticket.location} - {ticket.names}</h3>\n      <p><em>{ticket.issue}</em></p>\n      <button onClick={ props.onClickingEdit }>Update Ticket</button>\n      <button onClick={()=> onClickingDelete(ticket.id) }>Close Ticket</button>\n      <hr/>\n    </React.Fragment>\n  );\n}\n\nTicketDetail.propTypes = {\n  ticket: PropTypes.object,\n  onClickingDelete: PropTypes.func,\n  onClickingEdit: PropTypes.func\n};\n\nexport default TicketDetail;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction ReusableForm(props) {\n  return (\n    <React.Fragment>\n      <form onSubmit={props.formSubmissionHandler}>\n        <input\n          type='text'\n          name='names'\n          placeholder='Pair Names' />\n        <input\n          type='text'\n          name='location'\n          placeholder='Location' />\n        <textarea\n          name='issue'\n          placeholder='Describe your issue.' />\n        <button type='submit'>{props.buttonText}</button>\n      </form>\n    </React.Fragment>\n  );\n}\n\nReusableForm.propTypes = {\n  formSubmissionHandler: PropTypes.func,\n  buttonText: PropTypes.string\n};\n\nexport default ReusableForm;","import React from \"react\";\nimport ReusableForm from \"./ReusableForm\";\nimport PropTypes from \"prop-types\";\n\nfunction EditTicketForm (props) {\n  const { ticket } = props;\n\n  function handleEditTicketFormSubmission(event) {\n    event.preventDefault();\n    props.onEditTicket({names: event.target.names.value, location: event.target.location.value, issue: event.target.issue.value, id: ticket.id});\n  }\n\n  return (\n    <React.Fragment>\n      <ReusableForm \n        formSubmissionHandler={handleEditTicketFormSubmission}\n        buttonText=\"Update Ticket\" />\n    </React.Fragment>\n  );\n}\n\nEditTicketForm.propTypes = {\n  onEditTicket: PropTypes.func\n};\n\nexport default EditTicketForm;","import React from 'react';\nimport NewTicketForm from './NewTicketForm';\nimport TicketList from './TicketList';\nimport TicketDetail from './TicketDetail';\nimport EditTicketForm from './EditTicketForm';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nclass TicketControl extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      formVisibleOnPage: false,\n      selectedTicket: null,\n      editing: false\n    };\n  }\n\n  handleClick = () => {\n    if (this.state.selectedTicket != null) {\n      this.setState({\n        formVisibleOnPage: false,\n        selectedTicket: null,\n        editing: false\n      });\n    } else {\n      this.setState(prevState => ({\n        formVisibleOnPage: !prevState.formVisibleOnPage,\n      }));\n    }\n  }\n\n  handleAddingNewTicketToList = (newTicket) => {\n    const { dispatch } = this.props;\n    const { id, names, location, issue } = newTicket;\n    const action = {\n      type: 'ADD_TICKET',\n      id: id, \n      names: names,\n      location: location, \n      issue: issue,\n    }\n    dispatch(action);\n    this.setState({\n      formVisibleOnPage: false\n    });\n  }\n\n  handleChangingSelectedTicket = (id) => {\n    const selectedTicket = this.props.masterTicketList[id];\n    this.setState({selectedTicket: selectedTicket});\n  }\n\n  handleDeletingTicket = (id) => {\n    const {dispatch}= this.props;\n    const action = {\n      type:'DELETE_TICKET',\n        id:id\n    }\n    dispatch(action);\n    this.setState({\n      selectedTicket: null\n    });\n  }\n\n  handleEditClick = () => {\n    this.setState({editing: true});\n  }\n\n  handleEditingTicketInList = (ticketToEdit) => {\n    const { dispatch } = this.props;\n    const { id, names, location, issue } = ticketToEdit;\n    const action = { \n      type: 'ADD_TICKET',\n      id: id,\n      names: names,\n      location: location,\n      issue: issue,\n    }\n    dispatch(action);\n    this.setState({\n      editing: false,\n      selectedTicket: null\n    });\n  }\n\n  render(){\n    let currentlyVisibleState = null;\n    let buttonText = null;\n    if (this.state.editing ) {      \n      currentlyVisibleState = <EditTicketForm ticket = {this.state.selectedTicket} onEditTicket = {this.handleEditingTicketInList} />\n      buttonText = \"Return to Ticket List\";\n    } else if (this.state.selectedTicket != null) {\n      currentlyVisibleState = \n      <TicketDetail \n        ticket = {this.state.selectedTicket} \n        onClickingDelete = {this.handleDeletingTicket} \n        onClickingEdit = {this.handleEditClick} />\n      buttonText = \"Return to Ticket List\";\n    } else if (this.state.formVisibleOnPage) {\n      currentlyVisibleState = <NewTicketForm onNewTicketCreation={this.handleAddingNewTicketToList}  />;\n      buttonText = \"Return to Ticket List\";\n    } else {\n      currentlyVisibleState = <TicketList ticketList={this.props.masterTicketList} onTicketSelection={this.handleChangingSelectedTicket} />;\n      buttonText = \"Add Ticket\";\n    }\n    return (\n      <React.Fragment>\n        {currentlyVisibleState}\n        <button onClick={this.handleClick}>{buttonText}</button>\n      </React.Fragment>\n    );\n  }\n\n}\n\nTicketControl.propTypes = {\n  masterTicketList: PropTypes.object\n};\n\nconst mapStateToProps = state => {\n  return {\n    masterTicketList: state\n  }\n}\n\nTicketControl = connect(mapStateToProps)(TicketControl);\n\nexport default TicketControl;","// applicationCache.js is the parent component for all other components in our application\n\nimport React from \"react\";\nimport Header from \"./Header\";\nimport TicketControl from \"./TicketControl\"; \n//Above: Ticket control is the parent of NewTicketForm and TicketList so we only import this.\n\nfunction App(){\n  return ( \n    <React.Fragment>\n      <Header />\n      <TicketControl />\n    </React.Fragment>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore } from 'redux';\nimport reducer from './reducers/ticket-list-reducer';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(reducer); //one source of truth - god\n\nstore.subscribe(() => // great for testing!\nconsole.log(store.getState())\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export default (state = {}, action) => {\n  const { names, location, issue, id } = action;\n  switch (action.type) {\n  case 'ADD_TICKET':\n    return Object.assign({}, state, {\n      [id]: {\n        names: names,\n        location: location,\n        issue: issue,\n        id: id\n      }\n    });\n    case 'DELETE_TICKET':\n      const newState = { ...state };\n      delete newState[id];\n      return newState;\n    default:\n      return state;\n    };\n};"],"sourceRoot":""}